- name: install and setup opencv-python wheels with cuda enabled
  hosts: localhost
  connection: local
  vars_files:
    - vars.yml
  tasks:
    - name: install build prereqs
      apt:
        pkg:
          - git
          - cmake
          - build-essential
          - pkg-config
          - unzip
          - yasm
          - checkinstall
      become: true

    - name: install image libs
      apt:
        pkg:
          - libjpeg-dev
          - libpng-dev
          - libtiff-dev
      become: true

    - name: install audio/video libs
      apt:
        pkg:
          - libavcodec-dev
          - libavformat-dev
          - libavutil-dev
          - libswscale-dev
          - libavcodec-dev
          - libavformat-dev
          - libswscale-dev
          - libavresample-dev
          - libgstreamer1.0-dev
          - libgstreamer-plugins-base1.0-dev
          - libxvidcore-dev
          - x264
          - libx264-dev
          - libfaac-dev
          - libmp3lame-dev
          - libtheora-dev
          - libvorbis-dev
          - python3-dev
          - libatlas-base-dev
          - gfortran
          - libgtk-3-dev
          - libv4l-dev
      become: true

    - name: install python
      apt:
        pkg:
          - python3-dev
          - python3-pip
          - python3-testresources
      become: true

    - name: install opencv optimization libraries
      apt:
        pkg:
          - libatlas-base-dev
          - gfortran
      become: true
# Speech codecs [Optional Packages: Uncomment below line to execute/install]
#sudo apt install libopencore-amrnb-dev libopencore-amrwb-dev
# Camera libs [Optional Packages: Uncomment below 4 lines to execute/install]
#sudo apt-get install libdc1394-22 libdc1394-22-dev libxine2-dev libv4l-dev v4l-utils
#cd /usr/include/linux
#sudo ln -s -f ../libv4l1-videodev.h videodev.h

# Optional Packages: Uncomment below 4 lines to execute/install
#sudo apt-get install libprotobuf-dev protobuf-compiler libgoogle-glog-dev libgflags-dev libgphoto2-dev libeigen3-dev libhdf5-dev doxygen


# Installing Virtual Environment packages for python
# sudo pip install virtualenv virtualenvwrapper
    - name: create var for local opencv path
      set_fact:
        opencv_path: "{{millipyde_dir}}/setup/opencv-python"

    - name: print path of cloned repo
      debug:
        var: opencv_path

    - name: clone opencv repo
      git:
        clone: yes
        recursive: yes
        force: yes
        repo: https://github.com/opencv/opencv-python.git
        dest: "{{opencv_path}}"
        # keep submodules at version specified by .gitmodules
        track_submodules: no

    - name: remove build dir if exists
      file:
        state: absent
        path: "{{opencv_path}}/build"

    - name: make build dir
      file:
        state: directory
        path: "{{opencv_path}}/build"

    - name: make opencv-python wheels
      shell:
        chdir: "{{opencv_path}}/build"
        # to see live output from command run `tail -f millipyde/setup/opencv-python/opencv_build.out`
        cmd: "pip wheel .. --verbose &> {{opencv_path}}/opencv_build.out"
        executable: /usr/bin/bash
      environment:
        # enable additional modules (cudev)
        ENABLE_CONTRIB: 1
        # do not build with support for display functions like image preview
        ENABLE_HEADLESS: 1
        # CMAKE_BUILD_PARALLEL_LEVEL: 12
        CMAKE_ARGS: >
          -D WITH_CUDA=ON
          -D ENABLE_FAST_MATH=1
          -D CUDA_FAST_MATH=1
        # -D CMAKE_BUILD_TYPE=RELEASE
        # -D WITH_CUBLAS=1
    - name: move build dir out of cloned opencv repo
      shell:
        cmd: mv "{{opencv_path}}/build {{millipyde_dir}}/setup/opencv-wheels"
